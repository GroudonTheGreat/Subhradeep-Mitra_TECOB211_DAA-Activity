// link to medium problem
// https://www.hackerrank.com/challenges/magic-square-forming/problem

#include <bits/stdc++.h>

using namespace std;

// Complete the formingMagicSquare function below.
int formingMagicSquare(vector<vector<int>> s) {
    
    int arr0[3][3] = {4,9,2,3,5,7,8,1,6};
    int arr1[3][3] = {2,7,6,9,5,1,4,3,8};
    int arr2[3][3] = {6,1,8,7,5,3,2,9,4};
    int arr3[3][3] = {2,9,4,7,5,3,6,1,8};
    int arr4[3][3] = {6,7,2,1,5,9,8,3,4};
    int arr5[3][3] = {8,1,6,3,5,7,4,9,2};
    int arr6[3][3] = {8,3,4,1,5,9,6,7,2};
    int arr7[3][3] = {4,3,8,9,5,1,2,7,6};

    int cost[8] = {0};
    int min = 0;

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            cost[0] += abs(s[i][j] - arr0[i][j]);
            cost[1] += abs(s[i][j] - arr1[i][j]);
            cost[2] += abs(s[i][j] - arr2[i][j]);
            cost[3] += abs(s[i][j] - arr3[i][j]);
            cost[4] += abs(s[i][j] - arr4[i][j]);
            cost[5] += abs(s[i][j] - arr5[i][j]);
            cost[6] += abs(s[i][j] - arr6[i][j]);
            cost[7] += abs(s[i][j] - arr7[i][j]);
        }
    }

    min = cost[0];
    for (int i = 1; i < 8; i++) {
        if (min > cost[i]) {
            min = cost[i];
        }
    }
    return min;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    vector<vector<int>> s(3);
    for (int i = 0; i < 3; i++) {
        s[i].resize(3);

        for (int j = 0; j < 3; j++) {
            cin >> s[i][j];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    int result = formingMagicSquare(s);

    fout << result << "\n";

    fout.close();

    return 0;
}
